import type { NextRequest } from "next/server";
import type { User } from "./types";

// JWT verification for tokens generated by backend
export function verifyToken(token: string): User | null {
  try {
    // The token from backend is already a proper JWT, just decode the payload
    const [header, payload] = token.split(".");
    if (!header || !payload) return null;

    const decoded = JSON.parse(Buffer.from(payload, "base64").toString());
    if (!decoded.id || !decoded.role) {
      return null;
    }

    // Return minimal user object for auth checking
    // Full user data should be fetched from /auth/me when needed
    return {
      id: decoded.id,
      role: decoded.role,
      clubId: decoded.clubId,
      email: "placeholder", // Email will be fetched from backend when needed
      createdAt: new Date().toISOString(), // Placeholder date, will be updated from backend
    } as User;
  } catch {
    return null;
  }
}

export function getAuthUser(request: NextRequest): User | null {
  const authHeader = request.headers.get("authorization");
  if (!authHeader || !authHeader.startsWith("Bearer ")) {
    return null;
  }

  const token = authHeader.substring(7);
  return verifyToken(token);
}

export function requireAuth(
  request: NextRequest,
  requiredRole?: "superadmin" | "clubadmin"
): User | Response {
  const user = getAuthUser(request);

  if (!user) {
    return new Response(
      JSON.stringify({ success: false, error: "Unauthorized" }),
      {
        status: 401,
        headers: { "Content-Type": "application/json" },
      }
    );
  }

  if (
    requiredRole &&
    user.role !== requiredRole &&
    user.role !== "superadmin"
  ) {
    return new Response(
      JSON.stringify({ success: false, error: "Forbidden" }),
      {
        status: 403,
        headers: { "Content-Type": "application/json" },
      }
    );
  }

  return user;
}
